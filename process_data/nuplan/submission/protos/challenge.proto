syntax = "proto3";

package challenge_protocol;

service DetectionTracksChallenge {
  rpc InitializePlanner(PlannerInitializationLight) returns (Empty) {}
  rpc ComputeTrajectory(PlannerInput) returns (Trajectory) {}
}

message Empty {}

message SimulationHistoryBuffer {
  repeated bytes ego_states = 1;
  repeated bytes observations = 2;
  optional float sample_interval = 3;
}

message SimulationIteration {
  int64 time_us = 1;
  int32 index = 2;
}

message TrafficLightStatusType {
  string status_name = 1;
}

message TrafficLightStatusData {
  TrafficLightStatusType status = 1;
  int32 lane_connector_id = 2;
  int64 timestamp = 3;
}

message PlannerInput {
  SimulationIteration simulation_iteration = 1;
  SimulationHistoryBuffer simulation_history_buffer = 2;
  repeated TrafficLightStatusData traffic_light_data = 3;  // Note: original message is Optional, here is empty list if None
}

message StateSE2 {
  float x = 1;
  float y = 2;
  float heading = 3;
}

message StateVector2D {
  float x = 1;
  float y = 2;
}

message PlannerInitializationLight {
  repeated string route_roadblock_ids = 1;
  StateSE2 mission_goal = 2;
  string map_name = 3;
}

message EgoState {
  StateSE2 rear_axle_pose = 1;
  StateVector2D rear_axle_velocity_2d = 2;
  StateVector2D  rear_axle_acceleration_2d = 3;
  float tire_steering_angle = 4;
  int64 time_us = 5;
  float angular_vel = 6;
  float angular_accel = 7;
}

message Trajectory {
  repeated EgoState ego_states = 1;
}
